version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:3.7.1
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 20s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: jira_db
    ports:
      - "55432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql

  producer:
    build:
      context: ./producer
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "producer.py"]

  producer_aws:
    build:
      context: ./producer
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "producer_aws.py"]

  producer_github:
    build:
      context: ./producer
    command: ["python", "producer_github.py"]
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped

  consumer:
    build:
      context: ./consumer
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    restart: unless-stopped
    command: ["python", "consumer.py"]

  consumer_aws:
    build:
      context: ./consumer
    env_file: .env
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    restart: unless-stopped
    command: ["python", "consumer_aws.py"]

  consumer_github:
    build:
      context: ./consumer
    command: ["python", "consumer_github.py"]
    env_file: .env
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

volumes:
  pgdata:
